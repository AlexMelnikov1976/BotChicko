import os
import pandas as pd
import matplotlib.pyplot as plt
import gspread
from google.oauth2.service_account import Credentials
from apscheduler.schedulers.blocking import BlockingScheduler
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
import requests
import threading
from datetime import datetime, timedelta

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()
SHEET_ID = "1SHHKKcgXgbzs_AyBQJpyHx9zDauVz6iR9lz1V7Q3hyw"
SERVICE_ACCOUNT_FILE = "credentials.json"
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
SCOPES = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
CREDS = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)

def format_ruble(val):
    return f"{val:,.2f}‚ÇΩ".replace(",", " ").replace(".00", "")

def send_to_telegram(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": message}
    requests.post(url, data=data)

def read_data():
    print("–ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É...")
    gc = gspread.authorize(CREDS)
    sheet = gc.open_by_key(SHEET_ID).sheet1
    df = pd.DataFrame(sheet.get_all_records())
    print("–°—Ç–æ–ª–±—Ü—ã –∏–∑ Google Sheets:", list(df.columns))

    if "–î–∞—Ç–∞" not in df.columns:
        return pd.DataFrame()

    for col in df.columns:
        if col != "–î–∞—Ç–∞":
            df[col] = (
                df[col].astype(str)
                .str.replace(",", ".")
                .str.replace(r"[^\d\.]", "", regex=True)
            )
            df[col] = pd.to_numeric(df[col], errors="coerce")

    df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], dayfirst=True, errors="coerce")
    df = df.dropna(subset=["–î–∞—Ç–∞"])
    print("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:", df["–î–∞—Ç–∞"].unique())
    print(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏! {df.shape}")
    return df

def analyze(df):
    last_date = df["–î–∞—Ç–∞"].max()
    if pd.isna(last_date):
        return "üìÖ –î–∞—Ç–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞\n\n‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"

    today_df = df[df["–î–∞—Ç–∞"] == last_date]

    bar = today_df["–í—ã—Ä—É—á–∫–∞ –±–∞—Ä"].sum()
    kitchen = today_df["–í—ã—Ä—É—á–∫–∞ –∫—É—Ö–Ω—è"].sum()
    total = bar + kitchen
    avg_check = today_df["–°—Ä. —á–µ–∫ –æ–±—â–∏–π"].mean()/100
    depth = today_df["–°—Ä. –ø–æ–∑ —á–µ–∫ –æ–±—â–∏–π"].mean()/10
    hall_income = today_df["–ó–∞–ª –Ω–∞—á–∏—Å–ª–µ–Ω–æ"].sum()/100
    delivery = today_df["–í—ã—Ä—É—á–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ "].sum()

    return (
        f"üìÖ –î–∞—Ç–∞: {last_date.strftime('%Y-%m-%d')}\n\n"
        f"üìä –í—ã—Ä—É—á–∫–∞: {format_ruble(total)} (–ë–∞—Ä: {format_ruble(bar)} + –ö—É—Ö–Ω—è: {format_ruble(kitchen)})\n"
        f"üßæ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_ruble(avg_check)}\n"
        f"üìè –ì–ª—É–±–∏–Ω–∞ —á–µ–∫–∞: {depth:.2f}\n"
        f"ü™ë –ù–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ –∑–∞–ª—É: {format_ruble(hall_income)}\n"
        f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞: {format_ruble(delivery)}"
    )

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_chat.id) != str(CHAT_ID):
        return
    try:
        df = read_data()
        report = analyze(df)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=report)
    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def job():
    try:
        df = read_data()
        report = analyze(df)
        send_to_telegram(report)
    except Exception as e:
        send_to_telegram(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    print("‚è∞ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Ç—á—ë—Ç –±—É–¥–µ—Ç –≤ 9:30 –ø–æ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—É")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("analyze", analyze_command))
    scheduler = BlockingScheduler(timezone="Europe/Kaliningrad")
    scheduler.add_job(job, trigger="cron", hour=9, minute=30)
    threading.Thread(target=scheduler.start).start()
    app.run_polling()

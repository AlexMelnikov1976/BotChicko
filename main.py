import os
import json
import threading
import pandas as pd
import requests
import gspread
from datetime import datetime
from google.oauth2 import service_account
from apscheduler.schedulers.blocking import BlockingScheduler
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()
SHEET_ID = "1SHHKKcgXgbzs_AyBQJpyHx9zDauVz6iR9lz1V7Q3hyw"
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
SCOPES = ["https://www.googleapis.com/auth/spreadsheets.readonly"]

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google API
CREDS = service_account.Credentials.from_service_account_info(
    json.loads(os.environ['GOOGLE_CREDENTIALS']),
    scopes=SCOPES
)

# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –∫–∞–∫ —Ä—É–±–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12 000‚ÇΩ)
def format_ruble(val, decimals=0):
    if pd.isna(val):
        return "‚Äî"
    formatted = f"{val:,.{decimals}f}‚ÇΩ".replace(",", " ")
    if decimals == 0:
        formatted = formatted.replace(".00", "")
    return formatted

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_to_telegram(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": message}
    requests.post(url, data=data)

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
def read_data():
    print("–ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É...")
    gc = gspread.authorize(CREDS)
    sheet = gc.open_by_key(SHEET_ID).sheet1
    df = pd.DataFrame(sheet.get_all_records())
    print("–°—Ç–æ–ª–±—Ü—ã –∏–∑ Google Sheets:", list(df.columns))
    if "–î–∞—Ç–∞" not in df.columns:
        return pd.DataFrame()
    for col in df.columns:
        if col not in ["–î–∞—Ç–∞", "–§—É–¥–∫–æ—Å—Ç –æ–±—â–∏–π, %", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %"]:
            df[col] = (
                df[col].astype(str)
                .str.replace(",", ".")
                .str.replace(r"[^\d\.]", "", regex=True)
            )
            df[col] = pd.to_numeric(df[col], errors="coerce")
    df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], dayfirst=True, errors="coerce")
    df = df.dropna(subset=["–î–∞—Ç–∞"])
    print("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:", df["–î–∞—Ç–∞"].unique())
    print(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏! {df.shape}")
    return df

# –ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
def analyze(df):
    last_date = df["–î–∞—Ç–∞"].max()
    if pd.isna(last_date):
        return "üìÖ –î–∞—Ç–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞\n\n‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    today_df = df[df["–î–∞—Ç–∞"] == last_date]
    bar = round(today_df["–í—ã—Ä—É—á–∫–∞ –±–∞—Ä"].sum())
    kitchen = round(today_df["–í—ã—Ä—É—á–∫–∞ –∫—É—Ö–Ω—è"].sum())
    total = bar + kitchen
    avg_check = round(today_df["–°—Ä. —á–µ–∫ –æ–±—â–∏–π"].mean())
    depth = round(today_df["–°—Ä. –ø–æ–∑ —á–µ–∫ –æ–±—â–∏–π"].mean() / 10, 1)
    hall_income = round(today_df["–ó–∞–ª –Ω–∞—á–∏—Å–ª–µ–Ω–æ"].sum())
    delivery = round(today_df["–í—ã—Ä—É—á–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ "].sum())
    hall_share = (hall_income / total * 100) if total else 0
    delivery_share = (delivery / total * 100) if total else 0
    foodcost_raw = today_df["–§—É–¥–∫–æ—Å—Ç –æ–±—â–∏–π, %"].astype(str).str.replace(",", ".").str.replace("%", "").str.strip()
    foodcost = round(pd.to_numeric(foodcost_raw, errors="coerce").mean(), 1)
    avg_check_emoji = "üôÇ" if avg_check >= 1300 else "üôÅ"
    foodcost_emoji = "üôÇ" if foodcost <= 23 else "üôÅ"
    managers_today = today_df["–ú–µ–Ω–µ–¥–∂–µ—Ä"].dropna().unique()
    managers_str = ", ".join(managers_today) if len(managers_today) > 0 else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    return (
        f"üìÖ –î–∞—Ç–∞: {last_date.strftime('%Y-%m-%d')}\n\n"
        f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä(—ã): {managers_str}\n"
        f"üìä –í—ã—Ä—É—á–∫–∞: {format_ruble(total)} (–ë–∞—Ä: {format_ruble(bar)} + –ö—É—Ö–Ω—è: {format_ruble(kitchen)})\n"
        f"üßæ –°—Ä.—á–µ–∫: {format_ruble(avg_check)} {avg_check_emoji}\n"
        f"üìè –ì–ª—É–±–∏–Ω–∞: {depth:.1f}\n"
        f"ü™ë –ó–ü –∑–∞–ª: {format_ruble(hall_income)}\n"
        f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞: {format_ruble(delivery)} ({delivery_share:.1f}%)\n"
        f"üìä –î–æ–ª—è –ó–ü –∑–∞–ª–∞: {hall_share:.1f}%\n"
        f"üçî –§—É–¥–∫–æ—Å—Ç: {foodcost}% {foodcost_emoji}"
    )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∫–∏–¥–æ–∫)
async def managers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        df = read_data()
        if "–ú–µ–Ω–µ–¥–∂–µ—Ä" not in df.columns:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '–ú–µ–Ω–µ–¥–∂–µ—Ä' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.")
            return
        now = datetime.now()
        filtered = df[
            df["–ú–µ–Ω–µ–¥–∂–µ—Ä"].notna() &
            (df["–î–∞—Ç–∞"].dt.year == now.year) &
            (df["–î–∞—Ç–∞"].dt.month == now.month)
        ]
        if filtered.empty:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ö†Ô∏è –ù–µ—Ç —Å—Ç—Ä–æ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.")
            return

        # --- –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–∫–∏–¥–∫—É ---
        filtered["–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %"] = (
            filtered["–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %"]
            .astype(str)
            .str.replace(",", ".")
            .str.replace("%", "")
            .str.strip()
        )
        filtered["–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %"] = pd.to_numeric(filtered["–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %"], errors="coerce")
        filtered = filtered[(filtered["–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %"] >= 0) & (filtered["–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %"] <= 100)]

        # --- –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –§—É–¥–∫–æ—Å—Ç–∞ ---
        if "–§—É–¥–∫–æ—Å—Ç –æ–±—â–∏–π, %" in filtered.columns:
            filtered["–§—É–¥–∫–æ—Å—Ç –æ–±—â–∏–π, %"] = (
                filtered["–§—É–¥–∫–æ—Å—Ç –æ–±—â–∏–π, %"]
                .astype(str)
                .str.replace(",", ".")
                .str.replace("%", "")
                .str.strip()
            )
            filtered["–§—É–¥–∫–æ—Å—Ç –æ–±—â–∏–π, %"] = pd.to_numeric(filtered["–§—É–¥–∫–æ—Å—Ç –æ–±—â–∏–π, %"], errors="coerce")
            # –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ

        manager_stats = filtered.groupby("–ú–µ–Ω–µ–¥–∂–µ—Ä").agg({
            "–í—ã—Ä—É—á–∫–∞ –±–∞—Ä": "sum",
            "–í—ã—Ä—É—á–∫–∞ –∫—É—Ö–Ω—è": "sum",
            "–°—Ä. —á–µ–∫ –æ–±—â–∏–π": "mean",
            "–°—Ä. –ø–æ–∑ —á–µ–∫ –æ–±—â–∏–π": "mean",
            "–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %": "mean"
        }).fillna(0)
        manager_stats["–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞"] = manager_stats["–í—ã—Ä—É—á–∫–∞ –±–∞—Ä"] + manager_stats["–í—ã—Ä—É—á–∫–∞ –∫—É—Ö–Ω—è"]
        manager_stats["–ì–ª—É–±–∏–Ω–∞"] = manager_stats["–°—Ä. –ø–æ–∑ —á–µ–∫ –æ–±—â–∏–π"] / 10

        max_values = {
            "–°—Ä. —á–µ–∫ –æ–±—â–∏–π": manager_stats["–°—Ä. —á–µ–∫ –æ–±—â–∏–π"].max(),
            "–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞": manager_stats["–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞"].max(),
            "–ì–ª—É–±–∏–Ω–∞": manager_stats["–ì–ª—É–±–∏–Ω–∞"].max(),
            "–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %": manager_stats["–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %"].max() if manager_stats["–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %"].max() > 0 else 1
        }
        manager_stats["–û—Ü–µ–Ω–∫–∞"] = (
            (manager_stats["–°—Ä. —á–µ–∫ –æ–±—â–∏–π"] / max_values["–°—Ä. —á–µ–∫ –æ–±—â–∏–π"]) * 0.5 +
            (manager_stats["–ì–ª—É–±–∏–Ω–∞"] / max_values["–ì–ª—É–±–∏–Ω–∞"]) * 0.2 +
            (manager_stats["–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞"] / max_values["–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞"]) * 0.2 -
            (manager_stats["–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %"] / max_values["–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %"]) * 0.1
        )
        manager_stats = manager_stats.sort_values("–û—Ü–µ–Ω–∫–∞", ascending=False)
        message = f"üìÖ –ü–µ—Ä–∏–æ–¥: {now.strftime('%B %Y')}\n\n"
        for name, row in manager_stats.iterrows():
            message += (
                f"üë§ {name}\n"
                f"üìä –í—ã—Ä—É—á–∫–∞: {format_ruble(row['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞'])}\n"
                f"üßæ –°—Ä. —á–µ–∫: {format_ruble(row['–°—Ä. —á–µ–∫ –æ–±—â–∏–π'])}\n"
                f"üìè –ì–ª—É–±–∏–Ω–∞: {row['–ì–ª—É–±–∏–Ω–∞']:.1f}\n"
                f"üí∏ –°–∫–∏–¥–∫–∞: {round(row['–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %'], 1)}%\n\n"
            )
        message += f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {manager_stats.index[0]}"
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ ---
scheduler = BlockingScheduler(timezone="Europe/Kaliningrad")

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –¥–Ω—é
scheduler.add_job(lambda: send_to_telegram(analyze(read_data())), trigger="cron", hour=9, minute=30)

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
import asyncio  # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å asyncio!
scheduler.add_job(lambda: asyncio.run(managers_command(Update(update_id=0, message=None), ContextTypes.DEFAULT_TYPE())), trigger="cron", day_of_week="mon", hour=9, minute=30)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("‚è∞ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Ç—á—ë—Ç—ã: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 9:30")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("managers", managers_command))
    threading.Thread(target=scheduler.start).start()
    app.run_polling()

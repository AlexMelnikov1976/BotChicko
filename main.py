import os
import calendar
import threading
import pandas as pd
import gspread
import requests
from datetime import datetime, timedelta
from dotenv import load_dotenv
#from google.oauth2 import service_account   # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ utils.py
#from google_api import get_management_value # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ utils.py
from forecast import forecast                # –ü—Ä–æ–≥–Ω–æ–∑ ‚Äî –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ forecast.py
from utils import get_management_percent, get_management_value, format_ruble # –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ
from apscheduler.schedulers.blocking import BlockingScheduler
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===4
load_dotenv()
SHEET_ID = "1SHHKKcgXgbzs_AyBQJpyHx9zDauVz6iR9lz1V7Q3hyw"
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
SCOPES = ["https://www.googleapis.com/auth/spreadsheets.readonly"]

# –£–ø—Ä–∞–≤–ª—è—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
MANAGEMENT_SHEET_ID = "1nqpQ97D9rS2hPVQrrlbPKO5QG5RXvc936xvw6TSHnXc"
MANAGEMENT_SHEET_NAME = "–õ–∏—Å—Ç1"

SERVICE_ACCOUNT_FILE = 'fifth-medley-461515-h0-089884c74c28.json'
#CREDS = service_account.Credentials.from_service_account_file(
#    SERVICE_ACCOUNT_FILE,
#    scopes=SCOPES
#)

# def format_ruble(val, decimals=0):
#     if pd.isna(val):
#         return "‚Äî"
#     formatted = f"{val:,.{decimals}f}‚ÇΩ".replace(",", " ")
#     if decimals == 0:
#         formatted = formatted.replace(".00", "")
#     return formatted

# def send_to_telegram(message: str):
#     url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
#     data = {"chat_id": CHAT_ID, "text": message}
#     requests.post(url, data=data)

# def read_data():
#     gc = gspread.authorize(CREDS)
#     sheet = gc.open_by_key(SHEET_ID).sheet1
#     df = pd.DataFrame(sheet.get_all_records())
#     if "–î–∞—Ç–∞" not in df.columns:
#         return pd.DataFrame()
#     for col in df.columns:
#         if col not in ["–î–∞—Ç–∞", "–§—É–¥–∫–æ—Å—Ç –æ–±—â–∏–π, %", "–ú–µ–Ω–µ–¥–∂–µ—Ä"]:
#             df[col] = (
#                 df[col].astype(str)
#                 .str.replace(",", ".")
#                 .str.replace(r"[^\d\.]", "", regex=True)
#             )
#             df[col] = pd.to_numeric(df[col], errors="coerce")
#     df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], dayfirst=True, errors="coerce")
#     df = df.dropna(subset=["–î–∞—Ç–∞"])
#     return df

# def get_management_foodcost():
#     gc = gspread.authorize(CREDS)
#     sheet = gc.open_by_key(MANAGEMENT_SHEET_ID).worksheet(MANAGEMENT_SHEET_NAME)
#     df = pd.DataFrame(sheet.get_all_records())
#     fc_row = df[df.iloc[:,0].astype(str).str.lower().str.strip() == "—Ñ—É–¥–∫–æ—Å—Ç"]
#     if not fc_row.empty:
#         fc_percent = fc_row.iloc[0]["–ü—Ä–æ—Ü–µ–Ω—Ç"]
#         try:
#             return float(str(fc_percent).replace(",", "."))
#         except Exception:
#             return None
#     return None

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ utils.py ---
from utils import (
    read_data,             # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    send_to_telegram,      # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—É
    format_ruble,          # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É–±–ª—è
    get_management_foodcost
)

def analyze(df):
    last_date = df["–î–∞—Ç–∞"].max()
    if pd.isna(last_date):
        return "üìÖ –î–∞—Ç–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞\n\n‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"

    today_df = df[df["–î–∞—Ç–∞"] == last_date]
    bar = round(today_df["–í—ã—Ä—É—á–∫–∞ –±–∞—Ä"].sum())
    kitchen = round(today_df["–í—ã—Ä—É—á–∫–∞ –∫—É—Ö–Ω—è"].sum())
    total = bar + kitchen
    avg_check = round(today_df["–°—Ä. —á–µ–∫ –æ–±—â–∏–π"].mean())
    depth = round(today_df["–°—Ä. –ø–æ–∑ —á–µ–∫ –æ–±—â–∏–π"].mean() / 10, 1)
    hall_income = round(today_df["–ó–∞–ª –Ω–∞—á–∏—Å–ª–µ–Ω–æ"].sum())
    delivery = round(today_df["–í—ã—Ä—É—á–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ "].sum())
    hall_share = (hall_income / total * 100) if total else 0
    delivery_share = (delivery / total * 100) if total else 0

    foodcost_raw = today_df["–§—É–¥–∫–æ—Å—Ç –æ–±—â–∏–π, %"].astype(str)\
        .str.replace(",", ".")\
        .str.replace("%", "")\
        .str.strip()
    foodcost = round(pd.to_numeric(foodcost_raw, errors="coerce").mean() / 10, 1)

    discount_raw = today_df["–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %"].astype(str)\
        .str.replace(",", ".")\
        .str.replace("%", "")\
        .str.strip()
    discount = round(pd.to_numeric(discount_raw, errors="coerce").mean() / 10, 1)

    avg_check_emoji = "üôÇ" if avg_check >= 1300 else "üôÅ"
    foodcost_emoji = "üôÇ" if foodcost <= 23 else "üôÅ"

    managers_today = today_df["–ú–µ–Ω–µ–¥–∂–µ—Ä"].dropna().unique()
    manager_name = managers_today[0] if len(managers_today) > 0 else "‚Äî"

    return (
        f"üìÖ –î–∞—Ç–∞: {last_date.strftime('%Y-%m-%d')}\n\n"
        f"üë§ {manager_name}\n"
        f"üìä –í—ã—Ä—É—á–∫–∞: {format_ruble(total)} (–ë–∞—Ä: {format_ruble(bar)} + –ö—É—Ö–Ω—è: {format_ruble(kitchen)})\n"
        f"üßæ –°—Ä.—á–µ–∫: {format_ruble(avg_check)} {avg_check_emoji}\n"
        f"üìè –ì–ª—É–±–∏–Ω–∞: {depth:.1f}\n"
        f"ü™ë –ó–ü –∑–∞–ª: {format_ruble(hall_income)}\n"
        f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞: {format_ruble(delivery)} ({delivery_share:.1f}%)\n"
        f"üìä –î–æ–ª—è –ó–ü –∑–∞–ª–∞: {hall_share:.1f}%\n"
        f"üçî –§—É–¥–∫–æ—Å—Ç: {foodcost}% {foodcost_emoji}\n"
        f"üí∏ –°–∫–∏–¥–∫–∞: {discount}%"
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /forecast ===
async def forecast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_chat.id) != str(CHAT_ID):
        return
    try:
        df = read_data()
        result = forecast(df)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=result)
    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_chat.id) != str(CHAT_ID):
        return
    try:
        df = read_data()
        report = analyze(df)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=report)
    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def managers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_chat.id) != str(CHAT_ID):
        return
    try:
        df = read_data()

        if "–ú–µ–Ω–µ–¥–∂–µ—Ä" not in df.columns:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '–ú–µ–Ω–µ–¥–∂–µ—Ä' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.")
            return

        now = datetime.now()
        filtered = df[
            df["–ú–µ–Ω–µ–¥–∂–µ—Ä"].notna() &
            (df["–î–∞—Ç–∞"].dt.year == now.year) &
            (df["–î–∞—Ç–∞"].dt.month == now.month)
        ]

        if filtered.empty:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ö†Ô∏è –ù–µ—Ç —Å—Ç—Ä–æ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.")
            return

        manager_stats = filtered.groupby("–ú–µ–Ω–µ–¥–∂–µ—Ä").agg({
            "–í—ã—Ä—É—á–∫–∞ –±–∞—Ä": "sum",
            "–í—ã—Ä—É—á–∫–∞ –∫—É—Ö–Ω—è": "sum",
            "–°—Ä. —á–µ–∫ –æ–±—â–∏–π": "mean",
            "–°—Ä. –ø–æ–∑ —á–µ–∫ –æ–±—â–∏–π": "mean",
            "–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %": "mean"
        }).fillna(0)

        manager_stats["–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞"] = manager_stats["–í—ã—Ä—É—á–∫–∞ –±–∞—Ä"] + manager_stats["–í—ã—Ä—É—á–∫–∞ –∫—É—Ö–Ω—è"]
        manager_stats["–ì–ª—É–±–∏–Ω–∞"] = manager_stats["–°—Ä. –ø–æ–∑ —á–µ–∫ –æ–±—â–∏–π"] / 10

        max_values = {
            "–°—Ä. —á–µ–∫ –æ–±—â–∏–π": manager_stats["–°—Ä. —á–µ–∫ –æ–±—â–∏–π"].max(),
            "–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞": manager_stats["–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞"].max(),
            "–ì–ª—É–±–∏–Ω–∞": manager_stats["–ì–ª—É–±–∏–Ω–∞"].max()
        }

        manager_stats["–û—Ü–µ–Ω–∫–∞"] = (
            (manager_stats["–°—Ä. —á–µ–∫ –æ–±—â–∏–π"] / max_values["–°—Ä. —á–µ–∫ –æ–±—â–∏–π"]) * 0.5 +
            (manager_stats["–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞"] / max_values["–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞"]) * 0.3 +
            (manager_stats["–ì–ª—É–±–∏–Ω–∞"] / max_values["–ì–ª—É–±–∏–Ω–∞"]) * 0.2
        )

        manager_stats = manager_stats.sort_values("–û—Ü–µ–Ω–∫–∞", ascending=False)
        message = f"üìÖ –ü–µ—Ä–∏–æ–¥: {now.strftime('%B %Y')}\n\n"
        
        for name, row in manager_stats.iterrows():
            discount_percent = round(row['–°–∫–∏–¥–∫–∞ –æ–±—â–∏–π, %'] / 10, 1)
            message += (
                f"üë§ {name}\n"
                f"üìä –í—ã—Ä—É—á–∫–∞: {format_ruble(row['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞'])}\n"
                f"üßæ –°—Ä. —á–µ–∫: {format_ruble(row['–°—Ä. —á–µ–∫ –æ–±—â–∏–π'])}\n"
                f"üìè –ì–ª—É–±–∏–Ω–∞: {row['–ì–ª—É–±–∏–Ω–∞']:.1f}\n"
                f"üí∏ –°–∫–∏–¥–∫–∞: {discount_percent}%\n\n"
            )

        message += f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {manager_stats.index[0]}"
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)

    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ ---
def job():
    try:
        df = read_data()
        report = analyze(df)
        send_to_telegram(report)
    except Exception as e:
        send_to_telegram(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    print("‚è∞ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ Telegram\n")
    df = read_data()
    print("=== –ê–Ω–∞–ª–∏–∑ –¥–Ω—è ===")
    print(analyze(df))
    print("=== –ü—Ä–æ–≥–Ω–æ–∑ ===")
    print(forecast(df))         # <--- –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
    print("‚è∞ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Ç—á—ë—Ç –±—É–¥–µ—Ç –≤ 9:30 –ø–æ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—É")
    send_to_telegram("‚ö°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ main.py")
    # –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥

    #send_to_telegram("‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ main.py")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("analyze", analyze_command))
    app.add_handler(CommandHandler("forecast", forecast_command))
    app.add_handler(CommandHandler("managers", managers_command))

    scheduler = BlockingScheduler(timezone="Europe/Kaliningrad")
    scheduler.add_job(job, trigger="cron", hour=9, minute=30)
    threading.Thread(target=scheduler.start).start()

    app.run_polling()

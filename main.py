import os
import json
import calendar
import threading
import pandas as pd
import matplotlib.pyplot as plt
import gspread
import requests
from datetime import datetime, timedelta
from dotenv import load_dotenv
from google.oauth2 import service_account
from apscheduler.schedulers.blocking import BlockingScheduler
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()
SHEET_ID = "1SHHKKcgXgbzs_AyBQJpyHx9zDauVz6iR9lz1V7Q3hyw"
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
SCOPES = ["https://www.googleapis.com/auth/spreadsheets.readonly"]

CREDS = service_account.Credentials.from_service_account_info(
    json.loads(os.environ['GOOGLE_CREDENTIALS']),
    scopes=SCOPES
)

def format_ruble(val, decimals=0):
    if pd.isna(val):
        return "‚Äî"
    formatted = f"{val:,.{decimals}f}‚ÇΩ".replace(",", " ")
    if decimals == 0:
        formatted = formatted.replace(".00", "")
    return formatted

def send_to_telegram(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": message}
    requests.post(url, data=data)

def read_data():
    print("–ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É...")
    gc = gspread.authorize(CREDS)
    sheet = gc.open_by_key(SHEET_ID).sheet1
    df = pd.DataFrame(sheet.get_all_records())
    print("–°—Ç–æ–ª–±—Ü—ã –∏–∑ Google Sheets:", list(df.columns))

    if "–î–∞—Ç–∞" not in df.columns:
        return pd.DataFrame()

    for col in df.columns:
        if col not in ["–î–∞—Ç–∞", "–§—É–¥–∫–æ—Å—Ç –æ–±—â–∏–π, %"]:
            df[col] = (
                df[col].astype(str)
                .str.replace(",", ".")
                .str.replace(r"[^\d\.]", "", regex=True)
            )
            df[col] = pd.to_numeric(df[col], errors="coerce")

    df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], dayfirst=True, errors="coerce")
    df = df.dropna(subset=["–î–∞—Ç–∞"])
    print("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:", df["–î–∞—Ç–∞"].unique())
    print(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏! {df.shape}")
    return df

def analyze_all_managers(df):
    df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], dayfirst=True, errors="coerce")
    df = df.dropna(subset=["–î–∞—Ç–∞"])

    now = datetime.now()
    df_month = df[(df["–î–∞—Ç–∞"].dt.year == now.year) & (df["–î–∞—Ç–∞"].dt.month == now.month)]
    df_month = df_month.dropna(subset=["–ú–µ–Ω–µ–¥–∂–µ—Ä"])

    print("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:", df_month["–ú–µ–Ω–µ–¥–∂–µ—Ä"].unique())

    df_month["–í—ã—Ä—É—á–∫–∞"] = df_month["–í—ã—Ä—É—á–∫–∞ –±–∞—Ä"] + df_month["–í—ã—Ä—É—á–∫–∞ –∫—É—Ö–Ω—è"]

    grouped = df_month.groupby("–ú–µ–Ω–µ–¥–∂–µ—Ä").agg({
        "–í—ã—Ä—É—á–∫–∞": "sum",
        "–°—Ä. —á–µ–∫ –æ–±—â–∏–π": "mean",
        "–°—Ä. –ø–æ–∑ —á–µ–∫ –æ–±—â–∏–π": "mean"
    }).reset_index()

    if grouped.empty:
        return "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü."

    max_revenue = grouped["–í—ã—Ä—É—á–∫–∞"].max()
    max_check = grouped["–°—Ä. —á–µ–∫ –æ–±—â–∏–π"].max()
    max_depth = grouped["–°—Ä. –ø–æ–∑ —á–µ–∫ –æ–±—â–∏–π"].max()

    grouped["–û—Ü–µ–Ω–∫–∞"] = (
        (grouped["–í—ã—Ä—É—á–∫–∞"] / max_revenue) * 0.5 +
        (grouped["–°—Ä. —á–µ–∫ –æ–±—â–∏–π"] / max_check) * 0.3 +
        (grouped["–°—Ä. –ø–æ–∑ —á–µ–∫ –æ–±—â–∏–π"] / max_depth) * 0.2
    ) * 100

    grouped = grouped.round({"–í—ã—Ä—É—á–∫–∞": 0, "–°—Ä. —á–µ–∫ –æ–±—â–∏–π": 0, "–°—Ä. –ø–æ–∑ —á–µ–∫ –æ–±—â–∏–π": 2, "–û—Ü–µ–Ω–∫–∞": 1})
    grouped = grouped.sort_values(by="–û—Ü–µ–Ω–∫–∞", ascending=False).reset_index(drop=True)

    lines = ["üèÜ –†–µ–π—Ç–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∑–∞ –º–µ—Å—è—Ü:\n"]
    for i, row in grouped.iterrows():
        lines.append(
            f"{i+1}. {row['–ú–µ–Ω–µ–¥–∂–µ—Ä']} ‚Äî üí∏ {format_ruble(row['–í—ã—Ä—É—á–∫–∞'])}, üßæ {int(row['–°—Ä. —á–µ–∫ –æ–±—â–∏–π'])}‚ÇΩ, üìè {row['–°—Ä. –ø–æ–∑ —á–µ–∫ –æ–±—â–∏–π']} ‚Üí üî• {row['–û—Ü–µ–Ω–∫–∞']}%"
        )

    best = grouped.iloc[0]
    lines.append(f"\nü•á –õ—É—á—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä: {best['–ú–µ–Ω–µ–¥–∂–µ—Ä']} ‚Äî {best['–û—Ü–µ–Ω–∫–∞']}%")
    return "\n".join(lines)

async def managers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_chat.id) != str(CHAT_ID):
        return
    try:
        df = read_data()
        report = analyze_all_managers(df)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=report)
    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def job():
    try:
        df = read_data()
        report = analyze_all_managers(df)
        send_to_telegram(report)
    except Exception as e:
        send_to_telegram(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    print("‚è∞ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Ç—á—ë—Ç –±—É–¥–µ—Ç –≤ 9:30 –ø–æ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—É")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("managers", managers_command))

    scheduler = BlockingScheduler(timezone="Europe/Kaliningrad")
    scheduler.add_job(job, trigger="cron", hour=9, minute=30)
    threading.Thread(target=scheduler.start).start()

    app.run_polling()

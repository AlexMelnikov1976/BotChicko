from datetime import datetime, timedelta
import calendar
import pandas as pd
from utils import get_management_percent, get_management_value, format_ruble

def get_manager_bonus_line(profit_after_usn, format_ruble):
    # –ú–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–π –ª–æ–≥–∏–∫–∏ –ø–æ –±–æ–Ω—É—Å—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    return ""

def forecast(df):
    """–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É: —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –∏ –ø—Ä–∏–±—ã–ª—å."""
    now = datetime.now()
    # –¢–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    current_month_df = df[(df["–î–∞—Ç–∞"].dt.year == now.year) & (df["–î–∞—Ç–∞"].dt.month == now.month)]
    if current_month_df.empty:
        return "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü."

    return _forecast_core(current_month_df, now.year, now.month, period_label=f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {now.strftime('%B %Y')}")

def forecast_for_period(df, period='current'):
    """–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Å—è—Ü—É: period='current' –∏–ª–∏ 'previous'."""
    today = datetime.now()
    if period == 'current':
        year = today.year
        month = today.month
    elif period == 'previous':
        first_day_this_month = today.replace(day=1)
        last_day_prev_month = first_day_this_month - timedelta(days=1)
        year = last_day_prev_month.year
        month = last_day_prev_month.month
    else:
        return "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'current' –∏–ª–∏ 'previous'."

    period_df = df[(df["–î–∞—Ç–∞"].dt.year == year) & (df["–î–∞—Ç–∞"].dt.month == month)]
    if period_df.empty:
        period_text = "—Ç–µ–∫—É—â–∏–π" if period == "current" else "–ø—Ä–æ—à–ª—ã–π"
        return f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {period_text} –º–µ—Å—è—Ü."
    
    label = f"–ò—Ç–æ–≥–∏ –∑–∞ {datetime(year, month, 1).strftime('%B %Y')}"
    return _forecast_core(period_df, year, month, period_label=label)

def _forecast_core(df_period, year, month, period_label="–ü—Ä–æ–≥–Ω–æ–∑"):
    # –°—É–º–º–∞—Ä–Ω–∞—è –≤—ã—Ä—É—á–∫–∞
    total_revenue_series = df_period["–í—ã—Ä—É—á–∫–∞ –±–∞—Ä"] + df_period["–í—ã—Ä—É—á–∫–∞ –∫—É—Ö–Ω—è"]
    salary_series = df_period["–ù–∞—á–∏—Å–ª–µ–Ω–æ"]

    avg_daily_revenue = total_revenue_series.mean()
    avg_daily_salary = salary_series.mean()
    days_in_month = calendar.monthrange(year, month)[1]

    # –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ ‚Äî –ø—Ä–æ–≥–Ω–æ–∑, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ ‚Äî —Å—É–º–º–∞ (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —è–¥—Ä–æ)
    # –ó–¥–µ—Å—å ‚Äî –∏—Ç–æ–≥ –∑–∞ –ø–µ—Ä–∏–æ–¥ (–º–µ—Å—è—Ü)
    total_revenue = total_revenue_series.sum()

    fixed_salaries = get_management_value("–ó–ü —É–ø—Ä", "–°—É–º–º–∞")
    salary_msg = ""
    if fixed_salaries is None:
        fixed_salaries = 0
        salary_msg = "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–∫—Å. –∑–∞—Ä–ø–ª–∞—Ç—É –∏–∑ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã.\n"
    total_salary = salary_series.sum() + fixed_salaries
    labor_cost_share = (total_salary / total_revenue * 100) if total_revenue else 0

    franchise_percent = get_management_percent("–§—Ä–∞–Ω—à–∏–∑–∞")
    if franchise_percent is None:
        fc_msg = "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ —Ñ—Ä–∞–Ω—à–∏–∑–µ.\n"
        franchise_expense = 0
    else:
        franchise_expense = total_revenue * (franchise_percent / 100)
        fc_msg = ""

    writeoff_percent = get_management_percent("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–ø–∏—Å–∞–Ω–∏—è")
    wo_msg = ""
    if writeoff_percent is None:
        wo_msg = "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Å–ø–∏—Å–∞–Ω–∏—è.\n"
        writeoff_expense = 0
    else:
        writeoff_expense = total_revenue * (writeoff_percent / 1000)

    hozy_percent = get_management_percent("–ü—Ä–æ—Ü–µ–Ω—Ç —Ö–æ–∑—ã")
    if hozy_percent is None:
        hozy_percent = get_management_percent("–•–æ–∑—ã")
    hozy_msg = ""
    if hozy_percent is None:
        hozy_msg = "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Ö–æ–∑—Ä–∞—Å—Ö–æ–¥–æ–≤.\n"
        hozy_expense = 0
    else:
        hozy_expense = total_revenue * (hozy_percent / 100)

    foodcost_month_raw = df_period["–§—É–¥–∫–æ—Å—Ç –æ–±—â–∏–π, %"]
    foodcost_month_nums = pd.to_numeric(foodcost_month_raw, errors="coerce")
    foodcost_month = foodcost_month_nums.mean()
    foodcost_expense = total_revenue * (foodcost_month / 1000)

    delivery_col_candidates = [col for col in df_period.columns if "–¥–æ—Å—Ç–∞–≤" in col.lower()]
    if delivery_col_candidates:
        delivery_col = delivery_col_candidates[0]
    else:
        return "–°—Ç–æ–ª–±–µ—Ü –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    delivery_series = df_period[delivery_col]
    total_delivery = delivery_series.sum()
    delivery_percent = get_management_percent("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∞")
    if delivery_percent is not None and delivery_percent > 100:
        delivery_percent = delivery_percent / 100
    if delivery_percent is None:
        delivery_msg = "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ.\n"
        delivery_expense = 0
    else:
        delivery_expense = total_delivery * (delivery_percent / 100)
        delivery_msg = ""

    acquiring_percent = get_management_percent("–≠–∫–≤–∞–π—Ä–∏–Ω–≥")
    if acquiring_percent is not None and acquiring_percent > 100:
        acquiring_percent = acquiring_percent / 1000
    if acquiring_percent is None:
        acquiring_msg = "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞.\n"
        acquiring_expense = 0
    else:
        acquiring_expense = total_revenue * (acquiring_percent / 1000)
        acquiring_msg = ""

    bank_commission_percent = get_management_percent("–ö–æ–º–∏—Å—Å–∏—è –ë–∞–Ω–∫–∞")
    if bank_commission_percent is not None and bank_commission_percent > 100:
        bank_commission_percent = bank_commission_percent / 1000
    if bank_commission_percent is None:
        bank_commission_msg = "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ –±–∞–Ω–∫–∞.\n"
        bank_commission_expense = 0
    else:
        bank_commission_expense = total_revenue * (bank_commission_percent / 1000)
        bank_commission_msg = ""

    permanent_costs = get_management_value("–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ", "–°—É–º–º–∞")
    if permanent_costs is None:
        permanent_costs = 0
        permanent_msg = "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.\n"
    else:
        permanent_msg = ""

    salary_tax_percent = get_management_percent("–ù–∞–ª–æ–≥–∏ –ó–ü")
    if salary_tax_percent is not None:
        salary_tax = total_salary * (salary_tax_percent / 100)
        salary_tax_msg = ""
    else:
        salary_tax = 0
        salary_tax_msg = "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ –Ω–∞–ª–æ–≥–∞–º –ó–ü.\n"

    var_expense_share = (franchise_expense / total_revenue * 100) if total_revenue else 0
    wo_share = (writeoff_expense / total_revenue * 100) if total_revenue else 0
    hozy_share = (hozy_expense / total_revenue * 100) if total_revenue else 0

    total_costs = (
        total_salary
        + foodcost_expense
        + franchise_expense
        + writeoff_expense
        + hozy_expense
        + delivery_expense
        + acquiring_expense
        + bank_commission_expense
        + permanent_costs
        + salary_tax
    )

    profit = total_revenue - total_costs

    usn_percent = get_management_percent("–£–°–ù")
    if usn_percent is not None:
        usn_expense = profit * (usn_percent / 100)
        usn_msg = ""
    else:
        usn_expense = 0
        usn_msg = "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –£–°–ù.\n"

    profit_after_usn = profit - usn_expense
    bonus_line = get_manager_bonus_line(profit_after_usn, format_ruble)

    return (
        f"üìÖ {period_label}:\n"
        f"üìä –í—ã—Ä—É—á–∫–∞: {format_ruble(total_revenue)}\n"
        f"ü™ë –ó–ü: {format_ruble(total_salary)} (LC: {labor_cost_share:.1f}%)\n"
        f"üçî –§—É–¥–∫–æ—Å—Ç: {format_ruble(foodcost_expense)} ({foodcost_month/10:.1f}%)\n"
        f"üíº –§—Ä–∞–Ω—à–∏–∑–∞: {format_ruble(franchise_expense)} ({var_expense_share:.1f}%)\n"
        f"üìâ –°–ø–∏—Å–∞–Ω–∏–µ: {format_ruble(writeoff_expense)} ({wo_share:.1f}%)\n"
        f"üßπ –•–æ–∑—ã: {format_ruble(hozy_expense)} ({hozy_share:.1f}%)\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {format_ruble(delivery_expense)} ({delivery_percent if delivery_percent is not None else '-' }%)\n"
        f"üè¶ –≠–∫–≤–∞–π—Ä–∏–Ω–≥: {format_ruble(acquiring_expense)} ({acquiring_percent/10 if acquiring_percent is not None else '-'}%)\n"
        f"üí≥ –ö–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞: {format_ruble(bank_commission_expense)} ({bank_commission_percent/10 if bank_commission_percent is not None else '-'}%)\n"
        f"üßæ –ù–∞–ª–æ–≥–∏ –Ω–∞ –ó–ü: {format_ruble(salary_tax)} ({salary_tax_percent if salary_tax_percent is not None else '-'}%)\n"
        f"üß± –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ: {format_ruble(permanent_costs)}\n"
        f"üí∞ –ü—Ä–∏–±—ã–ª—å: {format_ruble(profit)}\n"
        f"üèõ –£–°–ù: {format_ruble(usn_expense)} ({usn_percent if usn_percent is not None else '-'}%)\n"
        f"üíµ –ü—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ –£–°–ù: {format_ruble(profit_after_usn)}\n"
        f"{bonus_line}\n"
        f"{fc_msg}{wo_msg}{hozy_msg}{salary_msg}{delivery_msg}{acquiring_msg}{bank_commission_msg}{permanent_msg}{salary_tax_msg}{usn_msg}"
    )
